# This workflow builds and uploads package.

name: Run build
on:
  workflow_call:
    inputs:
      matrix:
        description: "Target os to build package on."
        default: "[ 'ubuntu-latest', 'windows-latest', 'macOS-latest' ]"
        required: false
        type: string
      python-version:
        description: "Python version used for linting."
        default: 3.8
        required: false
        type: number
      pytest-args:
        description: "Parameters passed to pytest"
        default: ""
        required: false
        type: string
      poetry-bootstrap-args:
        description: "Parameters passed to poetry bootstrap command."
        default: ""
        required: false
        type: string

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: ${{ inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Set up Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y ${{ inputs.poetry-bootstrap-args }}

      - name: Add poetry to path (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Add poetry to path (MacOS or Ubuntu)
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Get POETRY tag
        id: poetry-tag
        run: echo "TAG={v$(poetry version -s)}" >> $GITHUB_OUTPUT

      - name: Get GITHUB tag
        id: git-tag
        run: echo "TAG={${GITHUB_REF#refs/*/}}" >> $GITHUB_OUTPUT

      - name: Validate tag
        run: |
          poetryTag=${{ steps.poetry-tag.outputs.TAG }}
          gitTag=${{ steps.git-tag.outputs.TAG }}
          echo POETRY $poetryTag
          echo GIT $gitTag
          python -c "import sys; eq='$poetryTag'!='$gitTag'; sys.exit(int(eq))"
          exit $?

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Build with Poetry
        run: poetry build

      - name: Create package
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          allowUpdates: true
          removeArtifacts: false
          replaceArtifacts: true
          body: "Automatically generated release."
          tag: ${{ steps.poetry-tag.outputs.TAG }}








